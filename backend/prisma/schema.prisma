// prisma/schema.prisma

// Este arquivo define seu esquema de banco de dados.
// Saiba mais sobre ele em: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // A URL do seu banco de dados MongoDB.
  // Certifique-se de que a variável de ambiente DATABASE_URL está configurada.
  url = env("DATABASE_URL")
}

// ----------------------------------------------------
// Enums
// ----------------------------------------------------

enum UserRole {
  PACIENTE
  PROFISSIONAL
  ADMIN
}

enum TaskStatus {
  PENDENTE
  CONCLUIDA
  ATRASADA
}

enum ConsultationStatus {
  AGENDADA
  REALIZADA
  CANCELADA
}

// ----------------------------------------------------
// Modelos (Entidades)
// Mapeiam suas tabelas para modelos Prisma
// ----------------------------------------------------

// Tabela base para usuários
model Usuario {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  nome            String
  email           String         @unique
  senha           String         @map("passwordHash") // Mapeia para passwordHash no código
  tipo            UserRole       // 'Paciente' ou 'Profissional'
  dataCadastro    DateTime       @default(now()) @map("data_cadastro")
  dataAtualizacao DateTime       @updatedAt @map("data_atualizacao")

  // Relações 1:1 com perfis específicos
  pacienteProfile PatientProfile?  @relation("UserToPatientProfile")
  profissionalProfile ProfessionalProfile? @relation("UserToProfessionalProfile")

  // Relações N:M ou 1:N que o usuário pode ter
  sintomas        Sintoma[]
  humores         Humor[]
  tarefasAtribuidas Tarefa[]     @relation("AssignedTo") // Tarefas atribuídas a este usuário
  tarefasCriadas  Tarefa[]     @relation("AssignedBy") // Tarefas criadas por este usuário (profissional)
  consultasPaciente Consulta[] @relation("PatientConsultations")
  consultasProfissional Consulta[] @relation("ProfessionalConsultations")
  mensagensEnviadas Message[] @relation("SenderMessages")
  mensagensRecebidas Message[] @relation("ReceiverMessages")

  @@map("usuarios") // Nome da coleção no MongoDB
}

// Perfil específico para Pacientes
model PatientProfile {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  usuarioId      String    @unique @db.ObjectId // Foreign Key para Usuario
  usuario        Usuario   @relation("UserToPatientProfile", fields: [usuarioId], references: [id])
  cpf            String?   @unique // Opcional no DBML, então Prisma também
  dataNascimento DateTime? @map("data_nascimento")
  contatoEmergencia Json? // Usado Json para flexibilidade, como no DBML

  // Relação para o profissional que cuida deste paciente
  profissionalDesignadoId String? @db.ObjectId // Opcional, um paciente pode não ter um profissional designado
  profissionalDesignado   ProfessionalProfile? @relation("ProfessionalToPatients", fields: [profissionalDesignadoId], references: [id])

  @@map("pacientes_perfis")
}

// Perfil específico para Profissionais
model ProfessionalProfile {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  usuarioId      String   @unique @db.ObjectId // Foreign Key para Usuario
  usuario        Usuario  @relation("UserToProfessionalProfile", fields: [usuarioId], references: [id])
  crm            String   @unique @map("crm_ou_crp") // Renomeado para mais clareza, como no seu DBML
  especialidade  String

  // Relação para os pacientes que este profissional atende
  pacientesAtendidos PatientProfile[] @relation("ProfessionalToPatients")

  @@map("profissionais_perfis")
}

// Tabela para registro de Sintomas
model Sintoma {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  pacienteId   String   @db.ObjectId // Foreign Key para Paciente
  paciente     Usuario  @relation(fields: [pacienteId], references: [id]) // Relação com Usuario, como no diagrama
  dataRegistro DateTime @default(now()) @map("data_registro")
  descricao    String
  intensidade  Int      // Ex: 1 a 5
  notas        String?

  @@map("sintomas")
}

// Tabela para registro de Humor
model Humor {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  pacienteId   String   @db.ObjectId // Foreign Key para Paciente
  paciente     Usuario  @relation(fields: [pacienteId], references: [id]) // Relação com Usuario
  dataRegistro DateTime @default(now()) @map("data_registro")
  tipoHumor    String   @map("tipo_humor") // Ex: 'Feliz', 'Triste', 'Ansioso'
  nivel        Int?     // Ex: -5 a 5, ou 1 a 10
  notas        String?

  @@map("humores")
}

// Tabela para Tarefas (atribuídas por profissionais a pacientes)
model Tarefa {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  pacienteId        String    @db.ObjectId // Foreign Key para Paciente
  paciente          Usuario   @relation("AssignedTo", fields: [pacienteId], references: [id])
  profissionalId    String?   @db.ObjectId // Opcional, pode ser nulo se for tarefa pessoal
  profissional      Usuario?  @relation("AssignedBy", fields: [profissionalId], references: [id]) // Relaciona ao Usuario, que pode ser Profissional

  descricao         String
  dataCriacao       DateTime  @default(now()) @map("data_criacao")
  dataLimite        DateTime? @map("data_limite")
  status            TaskStatus @default(PENDENTE) // 'Pendente', 'Concluída', 'Atrasada'
  observacoesPaciente String? @map("observacoes_paciente")

  @@map("tarefas")
}

// Tabela para Sugestões de Melhora de Humor
model SugestaoMelhoraHumor {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tipo          String
  descricao     String
  linkOuContato String?  @map("link_ou_contato")

  @@map("sugestoes_melhora_humor")
}

// Tabela para Consultas
model Consulta {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  pacienteId     String           @db.ObjectId
  paciente       Usuario          @relation("PatientConsultations", fields: [pacienteId], references: [id])
  profissionalId String           @db.ObjectId
  profissional   Usuario          @relation("ProfessionalConsultations", fields: [profissionalId], references: [id])
  dataHora       DateTime         @map("data_hora")
  status         ConsultationStatus @default(AGENDADA) // 'Agendada', 'Realizada', 'Cancelada'
  observacoes    String?

  @@map("consultas")
}

// Tabela para Mensagens (Chat)
model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  sender     Usuario  @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   Usuario  @relation("ReceiverMessages", fields: [receiverId], references: [id])
  content    String
  sentAt     DateTime @default(now()) @map("sent_at")
  read       Boolean  @default(false)

  @@map("mensagens")
}